map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen       80;
    server_name  localhost;

    return 301 https://$host$request_uri;
}

server {
    server_name  localhost;
    listen  443 ssl;
    resolver 127.0.0.11;

    include /etc/nginx/common-security.conf;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        error_page  404  /index.html?;
    }

    location /ws {
        # standard headers
        include /etc/nginx/common-headers.conf;
        
        # Note: to avoid CORS issue we need to have Nginx server pretend to be the "client" for the web socket calls.
        # So, all calls will be originated by Nginx server and not a browser
        proxy_set_header    Origin              'http://192.168.1.15:9090';
        proxy_set_header    Host                '192.168.1.15:9090';

        proxy_pass http://192.168.1.15:9090;
        proxy_redirect off;
        proxy_read_timeout 86400;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /api {
        proxy_pass http://192.168.1.15:9090/api;
    }

    location /rest {
        proxy_pass http://192.168.1.15:9090/rest;
    }

    location /management {
        proxy_pass http://192.168.1.15:9090/management;
    }

    location /kibana/ {
        rewrite /kibana/(.*) /$1 break;
        proxy_pass http://isc-kibana:5601/;
    }

    location /elasticsearch/ {
        proxy_pass http://isc-elasticsearch:9200/;
    }

    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    error_page   500 502 503 504  /50x.html;
}

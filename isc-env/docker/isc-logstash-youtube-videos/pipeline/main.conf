input {
  http_poller {
    urls => {
      youtube_query => {
        # Supports all options supported by ruby's Manticore HTTP client
        method => get
        url => "https://www.googleapis.com/youtube/v3/search?key=${YOUTUBE_SEARCH_KEY}&q=${YOUTUBE_SEARCH_QUERY}&part=snippet&maxResults=${YOUTUBE_SEARCH_MAX}&type=video&order=date"
        headers => {
          Accept => "application/json"
        }
      }
    }
    request_timeout => 60
    # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
    schedule => { cron => "0 * * * * UTC"}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    # metadata_target => "http_poller_metadata"
  }
}

filter {
  json {
    source =>"items"
  }
  mutate {
    remove_field => [ "pageInfo", "etag", "tags", "nextPageToken"]
  }
}

filter {
  split {
    field => "[items]"
  }
  mutate {
    add_field => {
      "title" => "%{[items][snippet][title]}"
      "description" => "%{[items][snippet][description]}"
      "videoId" => "%{[items][id][videoId]}"
    }
    remove_field => [ "[items]" ]
  }
}

output {
# stdout { }
  elasticsearch {
    document_id => "%{videoId}"
    hosts => ["isc-elasticsearch:9200"]
    index => "youtube-search-log"
  }

  file {
    write_behavior => "overwrite"
    path => "/out/%{videoId}.conf"
    codec => plain { format =>
'# %{videoId}
input {
  http_poller {
    urls => {
      "%{videoId}" => {
        method => get
        url => "https://www.googleapis.com/youtube/v3/commentThreads?key=${YOUTUBE_COMMENTS_KEY}&textFormat=plainText&part=snippet&videoId=%{videoId}&maxResults=${YOUTUBE_COMMENTS_MAX}"
        headers => {
          Accept => "application/json"
        }
      }
    }
    request_timeout => 60
    schedule => { cron => "5,25,45 * * * * UTC"}
    codec => "json"
  }
}
filter {
  split { field => "[items]" }
  mutate { remove_field => [ "pageInfo", "etag", "tags", "nextPageToken"] }

  if [items] {
     mutate {
       add_field => {
         "commentId" => "%{[items][id]}"
         "videoId" => "%{[items][snippet][videoId]}"
         "textDisplay" => "%{[items][snippet][topLevelComment][snippet][textDisplay]}"
         "textOriginal" => "%{[items][snippet][topLevelComment][snippet][textOriginal]}"
         "authorDisplayName" => "%{[items][snippet][topLevelComment][snippet][authorDisplayName]}"
         "authorChannelId" => "%{[items][snippet][topLevelComment][snippet][authorChannelId][value]}"
       }
     remove_field => [ "[items]" ]
     }
  }
}

output {
  # stdout {}
  elasticsearch {
    document_id => "%{commentId}"
    hosts => ["isc-elasticsearch:9200"]
    index => "youtube-comments-log"
  }
}
'
    }
  }
}
